package AscioServices;
# Generated by SOAP::Lite (v0.714) for Perl -- soaplite.com
# Copyright (C) 2000-2006 Paul Kulchenko, Byrne Reese
# -- generated at [Mon Jun 16 15:19:40 2014]
# -- generated from https://aws.ascio.com/2012/01/01/AscioService.wsdl
my %methods = (
DoRegistrantVerification => {
    endpoint => 'https://aws.ascio.com/2012/01/01/AscioService.svc',
    soapaction => 'http://www.ascio.com/2007/01/IRegistrantService/DoRegistrantVerification',
    namespace => 'http://www.ascio.com/2007/01',
    parameters => [
    ], # end parameters
  }, # end DoRegistrantVerification
DeleteContact => {
    endpoint => 'https://aws.ascio.com/2012/01/01/AscioService.svc',
    soapaction => 'http://www.ascio.com/2007/01/IContactService/DeleteContact',
    namespace => 'http://www.ascio.com/2007/01',
    parameters => [
    ], # end parameters
  }, # end DeleteContact
GetRegistrantVerificationInfo => {
    endpoint => 'https://aws.ascio.com/2012/01/01/AscioService.svc',
    soapaction => 'http://www.ascio.com/2007/01/IRegistrantService/GetRegistrantVerificationInfo',
    namespace => 'http://www.ascio.com/2007/01',
    parameters => [
    ], # end parameters
  }, # end GetRegistrantVerificationInfo
CreateDocumentation => {
    endpoint => 'https://aws.ascio.com/2012/01/01/AscioService.svc',
    soapaction => 'http://www.ascio.com/2007/01/IOrderService/CreateDocumentation',
    namespace => 'http://www.ascio.com/2007/01',
    parameters => [
    ], # end parameters
  }, # end CreateDocumentation
GetDomain => {
    endpoint => 'https://aws.ascio.com/2012/01/01/AscioService.svc',
    soapaction => 'http://www.ascio.com/2007/01/IDomainService/GetDomain',
    namespace => 'http://www.ascio.com/2007/01',
    parameters => [
    ], # end parameters
  }, # end GetDomain
CreateOrder => {
    endpoint => 'https://aws.ascio.com/2012/01/01/AscioService.svc',
    soapaction => 'http://www.ascio.com/2007/01/IOrderService/CreateOrder',
    namespace => 'http://www.ascio.com/2007/01',
    parameters => [
    ], # end parameters
  }, # end CreateOrder
UploadDocumentation => {
    endpoint => 'https://aws.ascio.com/2012/01/01/AscioService.svc',
    soapaction => 'http://www.ascio.com/2007/01/IOrderService/UploadDocumentation',
    namespace => 'http://www.ascio.com/2007/01',
    parameters => [
    ], # end parameters
  }, # end UploadDocumentation
LogIn => {
    endpoint => 'https://aws.ascio.com/2012/01/01/AscioService.svc',
    soapaction => 'http://www.ascio.com/2007/01/ISessionService/LogIn',
    namespace => 'http://www.ascio.com/2007/01',
    parameters => [
    ], # end parameters
  }, # end LogIn
CreateSupportOrder => {
    endpoint => 'https://aws.ascio.com/2012/01/01/AscioService.svc',
    soapaction => 'http://www.ascio.com/2007/01/IOrderService/CreateSupportOrder',
    namespace => 'http://www.ascio.com/2007/01',
    parameters => [
    ], # end parameters
  }, # end CreateSupportOrder
SearchDomain => {
    endpoint => 'https://aws.ascio.com/2012/01/01/AscioService.svc',
    soapaction => 'http://www.ascio.com/2007/01/IDomainService/SearchDomain',
    namespace => 'http://www.ascio.com/2007/01',
    parameters => [
    ], # end parameters
  }, # end SearchDomain
SearchNameServer => {
    endpoint => 'https://aws.ascio.com/2012/01/01/AscioService.svc',
    soapaction => 'http://www.ascio.com/2007/01/INameServerService/SearchNameServer',
    namespace => 'http://www.ascio.com/2007/01',
    parameters => [
    ], # end parameters
  }, # end SearchNameServer
UploadMessage => {
    endpoint => 'https://aws.ascio.com/2012/01/01/AscioService.svc',
    soapaction => 'http://www.ascio.com/2007/01/IOrderService/UploadMessage',
    namespace => 'http://www.ascio.com/2007/01',
    parameters => [
    ], # end parameters
  }, # end UploadMessage
GetMessageQueue => {
    endpoint => 'https://aws.ascio.com/2012/01/01/AscioService.svc',
    soapaction => 'http://www.ascio.com/2007/01/IMessageQueueService/GetMessageQueue',
    namespace => 'http://www.ascio.com/2007/01',
    parameters => [
    ], # end parameters
  }, # end GetMessageQueue
CreateContact => {
    endpoint => 'https://aws.ascio.com/2012/01/01/AscioService.svc',
    soapaction => 'http://www.ascio.com/2007/01/IContactService/CreateContact',
    namespace => 'http://www.ascio.com/2007/01',
    parameters => [
    ], # end parameters
  }, # end CreateContact
DeleteRegistrant => {
    endpoint => 'https://aws.ascio.com/2012/01/01/AscioService.svc',
    soapaction => 'http://www.ascio.com/2007/01/IRegistrantService/DeleteRegistrant',
    namespace => 'http://www.ascio.com/2007/01',
    parameters => [
    ], # end parameters
  }, # end DeleteRegistrant
AvailabilityCheck => {
    endpoint => 'https://aws.ascio.com/2012/01/01/AscioService.svc',
    soapaction => 'http://www.ascio.com/2007/01/IDomainService/AvailabilityCheck',
    namespace => 'http://www.ascio.com/2007/01',
    parameters => [
    ], # end parameters
  }, # end AvailabilityCheck
CreateRegistrant => {
    endpoint => 'https://aws.ascio.com/2012/01/01/AscioService.svc',
    soapaction => 'http://www.ascio.com/2007/01/IRegistrantService/CreateRegistrant',
    namespace => 'http://www.ascio.com/2007/01',
    parameters => [
    ], # end parameters
  }, # end CreateRegistrant
AckMessage => {
    endpoint => 'https://aws.ascio.com/2012/01/01/AscioService.svc',
    soapaction => 'http://www.ascio.com/2007/01/IMessageQueueService/AckMessage',
    namespace => 'http://www.ascio.com/2007/01',
    parameters => [
    ], # end parameters
  }, # end AckMessage
GetMessages => {
    endpoint => 'https://aws.ascio.com/2012/01/01/AscioService.svc',
    soapaction => 'http://www.ascio.com/2007/01/IOrderService/GetMessages',
    namespace => 'http://www.ascio.com/2007/01',
    parameters => [
    ], # end parameters
  }, # end GetMessages
GetRegistrantVerificationStatus => {
    endpoint => 'https://aws.ascio.com/2012/01/01/AscioService.svc',
    soapaction => 'http://www.ascio.com/2007/01/IRegistrantService/GetRegistrantVerificationStatus',
    namespace => 'http://www.ascio.com/2007/01',
    parameters => [
    ], # end parameters
  }, # end GetRegistrantVerificationStatus
CreateDnsSecKey => {
    endpoint => 'https://aws.ascio.com/2012/01/01/AscioService.svc',
    soapaction => 'http://www.ascio.com/2007/01/IDnsSecKeyService/CreateDnsSecKey',
    namespace => 'http://www.ascio.com/2007/01',
    parameters => [
    ], # end parameters
  }, # end CreateDnsSecKey
UpdateContact => {
    endpoint => 'https://aws.ascio.com/2012/01/01/AscioService.svc',
    soapaction => 'http://www.ascio.com/2007/01/IContactService/UpdateContact',
    namespace => 'http://www.ascio.com/2007/01',
    parameters => [
    ], # end parameters
  }, # end UpdateContact
SearchContact => {
    endpoint => 'https://aws.ascio.com/2012/01/01/AscioService.svc',
    soapaction => 'http://www.ascio.com/2007/01/IContactService/SearchContact',
    namespace => 'http://www.ascio.com/2007/01',
    parameters => [
    ], # end parameters
  }, # end SearchContact
GetDnsSecKey => {
    endpoint => 'https://aws.ascio.com/2012/01/01/AscioService.svc',
    soapaction => 'http://www.ascio.com/2007/01/IDnsSecKeyService/GetDnsSecKey',
    namespace => 'http://www.ascio.com/2007/01',
    parameters => [
    ], # end parameters
  }, # end GetDnsSecKey
LogOut => {
    endpoint => 'https://aws.ascio.com/2012/01/01/AscioService.svc',
    soapaction => 'http://www.ascio.com/2007/01/ISessionService/LogOut',
    namespace => 'http://www.ascio.com/2007/01',
    parameters => [
    ], # end parameters
  }, # end LogOut
SearchOrder => {
    endpoint => 'https://aws.ascio.com/2012/01/01/AscioService.svc',
    soapaction => 'http://www.ascio.com/2007/01/IOrderService/SearchOrder',
    namespace => 'http://www.ascio.com/2007/01',
    parameters => [
    ], # end parameters
  }, # end SearchOrder
SearchRegistrant => {
    endpoint => 'https://aws.ascio.com/2012/01/01/AscioService.svc',
    soapaction => 'http://www.ascio.com/2007/01/IRegistrantService/SearchRegistrant',
    namespace => 'http://www.ascio.com/2007/01',
    parameters => [
    ], # end parameters
  }, # end SearchRegistrant
CreateNameServer => {
    endpoint => 'https://aws.ascio.com/2012/01/01/AscioService.svc',
    soapaction => 'http://www.ascio.com/2007/01/INameServerService/CreateNameServer',
    namespace => 'http://www.ascio.com/2007/01',
    parameters => [
    ], # end parameters
  }, # end CreateNameServer
PollMessage => {
    endpoint => 'https://aws.ascio.com/2012/01/01/AscioService.svc',
    soapaction => 'http://www.ascio.com/2007/01/IMessageQueueService/PollMessage',
    namespace => 'http://www.ascio.com/2007/01',
    parameters => [
    ], # end parameters
  }, # end PollMessage
GetNameServer => {
    endpoint => 'https://aws.ascio.com/2012/01/01/AscioService.svc',
    soapaction => 'http://www.ascio.com/2007/01/INameServerService/GetNameServer',
    namespace => 'http://www.ascio.com/2007/01',
    parameters => [
    ], # end parameters
  }, # end GetNameServer
SearchDnsSecKey => {
    endpoint => 'https://aws.ascio.com/2012/01/01/AscioService.svc',
    soapaction => 'http://www.ascio.com/2007/01/IDnsSecKeyService/SearchDnsSecKey',
    namespace => 'http://www.ascio.com/2007/01',
    parameters => [
    ], # end parameters
  }, # end SearchDnsSecKey
Whois => {
    endpoint => 'https://aws.ascio.com/2012/01/01/AscioService.svc',
    soapaction => 'http://www.ascio.com/2007/01/IDomainService/Whois',
    namespace => 'http://www.ascio.com/2007/01',
    parameters => [
    ], # end parameters
  }, # end Whois
GetRegistrant => {
    endpoint => 'https://aws.ascio.com/2012/01/01/AscioService.svc',
    soapaction => 'http://www.ascio.com/2007/01/IRegistrantService/GetRegistrant',
    namespace => 'http://www.ascio.com/2007/01',
    parameters => [
    ], # end parameters
  }, # end GetRegistrant
ValidateOrder => {
    endpoint => 'https://aws.ascio.com/2012/01/01/AscioService.svc',
    soapaction => 'http://www.ascio.com/2007/01/IOrderService/ValidateOrder',
    namespace => 'http://www.ascio.com/2007/01',
    parameters => [
    ], # end parameters
  }, # end ValidateOrder
GetContact => {
    endpoint => 'https://aws.ascio.com/2012/01/01/AscioService.svc',
    soapaction => 'http://www.ascio.com/2007/01/IContactService/GetContact',
    namespace => 'http://www.ascio.com/2007/01',
    parameters => [
    ], # end parameters
  }, # end GetContact
DeleteNameServer => {
    endpoint => 'https://aws.ascio.com/2012/01/01/AscioService.svc',
    soapaction => 'http://www.ascio.com/2007/01/INameServerService/DeleteNameServer',
    namespace => 'http://www.ascio.com/2007/01',
    parameters => [
    ], # end parameters
  }, # end DeleteNameServer
GetOrder => {
    endpoint => 'https://aws.ascio.com/2012/01/01/AscioService.svc',
    soapaction => 'http://www.ascio.com/2007/01/IOrderService/GetOrder',
    namespace => 'http://www.ascio.com/2007/01',
    parameters => [
    ], # end parameters
  }, # end GetOrder
UploadRegistrantVerificationMessage => {
    endpoint => 'https://aws.ascio.com/2012/01/01/AscioService.svc',
    soapaction => 'http://www.ascio.com/2007/01/IRegistrantService/UploadRegistrantVerificationMessage',
    namespace => 'http://www.ascio.com/2007/01',
    parameters => [
    ], # end parameters
  }, # end UploadRegistrantVerificationMessage
); # end my %methods

use SOAP::Lite;
use Exporter;
use Carp ();

use vars qw(@ISA $AUTOLOAD @EXPORT_OK %EXPORT_TAGS);
@ISA = qw(Exporter SOAP::Lite);
@EXPORT_OK = (keys %methods);
%EXPORT_TAGS = ('all' => [@EXPORT_OK]);

sub _call {
    my ($self, $method) = (shift, shift);
    my $name = UNIVERSAL::isa($method => 'SOAP::Data') ? $method->name : $method;
    my %method = %{$methods{$name}};
    $self->proxy($method{endpoint} || Carp::croak "No server address (proxy) specified")
        unless $self->proxy;
    my @templates = @{$method{parameters}};
    my @parameters = ();
    foreach my $param (@_) {
        if (@templates) {
            my $template = shift @templates;
            my ($prefix,$typename) = SOAP::Utils::splitqname($template->type);
            my $method = 'as_'.$typename;
            # TODO - if can('as_'.$typename) {...}
            my $result = $self->serializer->$method($param, $template->name, $template->type, $template->attr);
            push(@parameters, $template->value($result->[2]));
        }
        else {
            push(@parameters, $param);
        }
    }
    $self->endpoint($method{endpoint})
       ->ns($method{namespace})
       ->on_action(sub{qq!"$method{soapaction}"!});
  $self->serializer->register_ns("http://schemas.xmlsoap.org/wsdl/soap12/","soap12");
  $self->serializer->register_ns("http://schemas.xmlsoap.org/ws/2004/08/addressing/policy","wsap");
  $self->serializer->register_ns("http://schemas.xmlsoap.org/ws/2004/09/policy","wsp");
  $self->serializer->register_ns("http://schemas.xmlsoap.org/soap/envelope/","soap");
  $self->serializer->register_ns("http://schemas.xmlsoap.org/wsdl/","wsdl");
  $self->serializer->register_ns("http://schemas.xmlsoap.org/soap/encoding/","soapenc");
  $self->serializer->register_ns("http://www.w3.org/2001/XMLSchema","xsd");
  $self->serializer->register_ns("http://www.ascio.com/2007/01","");
  $self->serializer->register_ns("http://www.ascio.com/2012/01/01/AscioService","tns");
  $self->serializer->register_ns("http://schemas.xmlsoap.org/ws/2004/08/addressing","wsa");
  $self->serializer->register_ns("http://www.w3.org/2005/08/addressing","wsa10");
  $self->serializer->register_ns("http://schemas.microsoft.com/ws/2005/12/wsdl/contract","msc");
  $self->serializer->register_ns("http://www.w3.org/2006/05/addressing/wsdl","wsaw");
  $self->serializer->register_ns("http://www.ascio.com/2007/01","i0");
  $self->serializer->register_ns("http://www.w3.org/2007/05/addressing/metadata","wsam");
  $self->serializer->register_ns("http://schemas.xmlsoap.org/ws/2004/09/mex","wsx");
    my $som = $self->SUPER::call($method => @parameters);
    if ($self->want_som) {
        return $som;
    }
    UNIVERSAL::isa($som => 'SOAP::SOM') ? wantarray ? $som->paramsall : $som->result : $som;
}

sub BEGIN {
    no strict 'refs';
    for my $method (qw(want_som)) {
        my $field = '_' . $method;
        *$method = sub {
            my $self = shift->new;
            @_ ? ($self->{$field} = shift, return $self) : return $self->{$field};
        }
    }
}
no strict 'refs';
for my $method (@EXPORT_OK) {
    my %method = %{$methods{$method}};
    *$method = sub {
        my $self = UNIVERSAL::isa($_[0] => __PACKAGE__)
            ? ref $_[0]
                ? shift # OBJECT
                # CLASS, either get self or create new and assign to self
                : (shift->self || __PACKAGE__->self(__PACKAGE__->new))
            # function call, either get self or create new and assign to self
            : (__PACKAGE__->self || __PACKAGE__->self(__PACKAGE__->new));
        $self->_call($method, @_);
    }
}

sub AUTOLOAD {
    my $method = substr($AUTOLOAD, rindex($AUTOLOAD, '::') + 2);
    return if $method eq 'DESTROY' || $method eq 'want_som';
    die "Unrecognized method '$method'. List of available method(s): @EXPORT_OK\n";
}

1;
